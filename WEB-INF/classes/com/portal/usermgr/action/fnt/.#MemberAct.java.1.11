/**
 * 
 */
package com.portal.usermgr.action.fnt;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.javapms.basic.security.encoder.PwdEncoder;
import com.javapms.basic.upload.FileRepository;
import com.javapms.basic.utils.ResponseUtils;
import com.javapms.basic.utils.ServicesUtils;
import com.portal.doccenter.entity.Article;
import com.portal.doccenter.entity.ArticleExt;
import com.portal.doccenter.entity.ArticleTxt;
import com.portal.doccenter.entity.ArticleType;
import com.portal.doccenter.entity.Channel;
import com.portal.doccenter.entity.Model;
import com.portal.doccenter.entity.ModelField;
import com.portal.doccenter.service.ArticleService;
import com.portal.doccenter.service.ArticleTypeService;
import com.portal.doccenter.service.ChannelService;
import com.portal.doccenter.service.ModelFieldService;
import com.portal.doccenter.service.ModelService;
import com.portal.sysmgr.entity.Site;
import com.portal.sysmgr.utils.Constants;
import com.portal.sysmgr.utils.ContextTools;
import com.portal.sysmgr.utils.ViewTools;
import com.portal.usermgr.entity.Member;
import com.portal.usermgr.entity.User;
import com.portal.usermgr.service.MemberService;
import com.portal.usermgr.service.UserBindService;

/**
 * @author liqiang
 * 
 */
@Controller
public class MemberAct {

	public static final String MEMBER_INDEX = "tpl.memberIndex";
	public static final String MEMBER_EDIT_PASS = "tpl.memberEditPass";
	public static final String MEMBER_EDIT_INFO = "tpl.memberEditInfo";
	public static final String DOC_LIST = "tpl.docList";
	public static final String DOC_ADD = "tpl.docAdd";
	public static final String DOC_EDIT = "tpl.docEdit";
	public static final String MY_THEME = "tpl.myTheme";
	public static final String MY_REPLY = "tpl.myReply";
	public static final String USER_DOC = "tpl.userdoc";

	@RequestMapping(value = "/member/index.jsp", method = RequestMethod.GET)
	public String index(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, MEMBER_INDEX);
	}

	@RequestMapping(value = "/member/editPass.jsp", method = RequestMethod.GET)
	public String editPass(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, MEMBER_EDIT_PASS);
	}

	@RequestMapping(value = "/member/editPass.jsp", method = RequestMethod.POST)
	public String editPassSumbit(String oldpassword, String password,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		if (user.getPassword().equals(pwdEncoder.encodePassword(oldpassword))) {
			memberService.updatePass(user.getId(), password);
			model.addAttribute(Constants.MSG, "密码修改成功!");
			model.addAttribute("status", 1);
		} else {
			model.addAttribute(Constants.MSG, "原密码错误，修改失败!");
			model.addAttribute("status", 0);
		}
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, MEMBER_EDIT_PASS);
	}

	@RequestMapping(value = "/member/editInfo.jsp", method = RequestMethod.GET)
	public String editInfo(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, MEMBER_EDIT_INFO);
	}

	@RequestMapping(value = "/member/editInfo.jsp", method = RequestMethod.POST)
	public String editInfoSubmit(User u, Member m,
			@RequestParam(value = "file", required = false) MultipartFile file,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model, RedirectAttributes ra) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		if (!file.isEmpty()) {
			if (file.getContentType().indexOf("image") == -1) {
				ra.addFlashAttribute(Constants.MSG, "头像格式错误，修改资料失败！");
				return "redirect:index.jsp";
			}
			String fileUrl = fileRepository.uploadFile(file,
					site.getUploadPath());
			m.setAvatar(fileUrl);
		}
		m.setRegisterIp(ServicesUtils.getIpAddr(request));
		memberService.updateMember(u, m, null, null, site.getId());
		ra.addFlashAttribute(Constants.MSG, "基本资料修改成功!");
		return "redirect:index.jsp";
	}

	@RequestMapping(value = "/member/docList.jsp", method = RequestMethod.GET)
	public String docList(String title, Integer chnlId, Integer[] typeIds,
			Integer[] modelIds, boolean top, boolean recommend,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		return docListpage(1, title, chnlId, typeIds, modelIds, top, recommend,
				request, response, model);
	}

	@RequestMapping(value = "/member/docList_{page:[0-9]+}.jsp", method = RequestMethod.GET)
	public String docListpage(@PathVariable Integer page, String title,
			Integer chnlId, Integer[] typeIds, Integer[] modelIds, boolean top,
			boolean recommend, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		Page<Article> p = service.getPageDocByMember(title, typeIds, modelIds,
				top, recommend, site.getId(), user.getId(), chnlId, page, 15);
		model.addAttribute("page", p);
		model.addAttribute("typeList", typeList);
		model.addAttribute("modelList", modelService.getList(false, null, null));
		ViewTools.frontData(request, model, site);
		ViewTools.frontPageData(request, model, page);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, DOC_LIST);
	}

	@RequestMapping(value = "/member/docAdd-{modelId:[0-9]+}.jsp", method = RequestMethod.GET)
	public String docAdd(@PathVariable Integer modelId,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		Model m = modelService.findById(modelId);
		if (m == null) {
			return ViewTools.pageNotFound(response);
		}
		List<ModelField> fieldList = modelFieldService.getList(m.getId(),
				false, null, null);
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		ViewTools.frontData(request, model, site);
		model.addAttribute("model", m);
		model.addAttribute("fieldList", fieldList);
		model.addAttribute("typeList", typeList);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, DOC_ADD);
	}

	@RequestMapping(value = "/member/docSave.jsp", method = RequestMethod.POST)
	public String docSave(Article bean, ArticleExt ext, ArticleTxt txt,
			Integer modelId, String[] attPaths, String[] attNames,
			String[] imgPaths, String[] imgDescs, Boolean[] thumbs,
			String[] imgStyles, Integer channelId, HttpServletRequest request,
			HttpServletResponse response, ModelMap model, RedirectAttributes ra) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		bean.setSite(site);
		bean.setAttr(ServicesUtils.getRequestMap(request, "attr_"));
		bean = service.save(bean, ext, txt, site, user, null, attPaths,
				attNames, imgPaths, imgDescs, thumbs, imgStyles, channelId,
				modelId, true);
		if (user.getMember() != null) {
			user.getMember().setLastTime(new Date());
			memberService.update(user.getMember());
		}
		ra.addFlashAttribute(Constants.MSG, "文档添加成功，请等待审核!");
		return "redirect:docList.jsp";
	}

	@RequestMapping(value = "/member/docEdit-{id:[0-9]+}.jsp", method = RequestMethod.GET)
	public String docEdit(@PathVariable Integer id, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		Article article = service.findById(id);
		if (article == null || !article.getUser().equals(user)) {
			return ViewTools.pageNotFound(response);
		}
		List<ModelField> fieldList = modelFieldService.getList(article
				.getModel().getId(), false, null, null);
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		model.addAttribute("article", article);
		model.addAttribute("channel", article.getChannel());
		model.addAttribute("fieldList", fieldList);
		model.addAttribute("typeList", typeList);
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, DOC_EDIT);
	}

	@RequestMapping(value = "/member/docUpdate.jsp", method = RequestMethod.POST)
	public String docUpdate(Article bean, ArticleExt ext, ArticleTxt txt,
			Integer[] channelIds, Integer[] topicIds, Integer[] viewGroupIds,
			String[] attPaths, String[] attNames, String[] imgPaths,
			String[] imgDescs, Boolean[] thumbs, String[] imgStyles,
			Integer channelId, HttpServletRequest request, ModelMap model,
			RedirectAttributes ra) {
		User user = ContextTools.getUser(request);
		Map<String, String> attr = ServicesUtils
				.getRequestMap(request, "attr_");
		bean = service.update(bean, ext, txt, channelIds, viewGroupIds,
				attPaths, attNames, imgPaths, imgDescs, thumbs, imgStyles,
				attr, channelId, user, null, true);
		ra.addFlashAttribute(Constants.MSG, "文档修改成功，请等待审核!");
		return "redirect:docList.jsp";
	}

	@RequestMapping(value = "/member/docDel-{id:[0-9]+}.jsp", method = RequestMethod.GET)
	public String docDel(@PathVariable Integer id, HttpServletRequest request,
			HttpServletResponse response, ModelMap model, RedirectAttributes ra) {
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		Article article = service.findById(id);
		if (article == null || !article.getUser().equals(user)) {
			return ViewTools.pageNotFound(response);
		}
		service.cycle(id);
		ra.addFlashAttribute(Constants.MSG, "文档删除成功!");
		return "redirect:docList.jsp";
	}

	@RequestMapping(value = "/member/themeList.jsp", method = RequestMethod.GET)
	public String themeList(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		return themeListpage(1, request, response, model);
	}

	@RequestMapping(value = "/member/themeList_{page:[0-9]+}.jsp", method = RequestMethod.GET)
	public String themeListpage(@PathVariable Integer page,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		ViewTools.frontData(request, model, site);
		ViewTools.frontPageData(request, model, page);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, MY_THEME);
	}

	@RequestMapping(value = "/member/replyList.jsp", method = RequestMethod.GET)
	public String replyList(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		return replyListpage(1, request, response, model);
	}

	@RequestMapping(value = "/member/replyList_{page:[0-9]+}.jsp", method = RequestMethod.GET)
	public String replyListpage(@PathVariable Integer page,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user == null) {
			return ViewTools.showLogin(request, model, "必须登录才可以访问该页面!");
		}
		ViewTools.frontData(request, model, site);
		ViewTools.frontPageData(request, model, page);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, MY_REPLY);
	}

	@RequestMapping(value = "/userdoc-{userId:[0-9]+}.jsp", method = RequestMethod.GET)
	public String userdoc(@PathVariable Integer userId,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		return userdocpage(userId, 1, request, response, model);
	}

	@RequestMapping(value = "/userdoc-{userId:[0-9]+}_{page:[0-9]+}.jsp", method = RequestMethod.GET)
	public String userdocpage(@PathVariable Integer userId,
			@PathVariable Integer page, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		model.addAttribute("member", memberService.findById(userId));
		ViewTools.frontData(request, model, site);
		ViewTools.frontPageData(request, model, page);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, USER_DOC);
	}

	@RequestMapping(value = "/userbind.jsp", method = RequestMethod.GET)
	public void userbind(String username, String password, Integer status,
			HttpServletRequest request, HttpServletResponse response)
			throws JSONException {
		JSONObject json = new JSONObject();
		User user = ContextTools.getUser(request);
		if (user == null) {
			return;
		}
		userBindService.save(user, username, password, status);
		ResponseUtils.renderJson(response, json.toString());
	}

	@RequestMapping(value = "/member/channeltree.jsp")
	public String addtree(Integer parentId, Integer modelId,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		model.addAttribute("parentId", parentId);
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		List<Channel> list = channelService.getChannelByModelAndMember(
				parentId, modelId, user, site.getId());
		model.addAttribute("list", list);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return ViewTools.getTplPath(null, site.getSolutionPath(),
				Constants.TPLDIR_USER, "channeltree");
	}

	@RequestMapping("/kind/upload_file.jsp")
	public void kinduploadImg(
			@RequestParam(value = "imgFile", required = false) MultipartFile file,
			HttpServletRequest request, HttpServletResponse response)
			throws JSONException {
		System.out.println("-------");
		JSONObject json = new JSONObject();
		Site site = ContextTools.getSite(request);
		String ctx = site.getContextPath() == null ? "" : site.getContextPath();
		String fileUrl = fileRepository.uploadFile(file, site.getUploadPath());
		json.put("error", 0);
		json.put("url", ctx + fileUrl);
		ResponseUtils.renderText(response, json.toString());
		return;
	}

	@RequestMapping("/upload_attach.jsp")
	public void uploadAttachment(
			@RequestParam(value = "attachFile", required = false) MultipartFile file,
			String attachmentNum, HttpServletRequest request,
			HttpServletResponse response) throws JSONException {
		Site site = ContextTools.getSite(request);
		String fileUrl = fileRepository.uploadFile(file, site.getUploadPath());
		ResponseUtils.renderText(response, fileUrl);
	}

	@RequestMapping("/upload_img.jsp")
	public void uploadImg(
			@RequestParam(value = "imgFile", required = false) MultipartFile file,
			HttpServletRequest request, HttpServletResponse response)
			throws JSONException {
		Site site = ContextTools.getSite(request);
		String fileUrl = fileRepository.uploadFile(file, site.getUploadPath());
		ResponseUtils.renderText(response, fileUrl);
	}

	@Autowired
	private MemberService memberService;
	@Autowired
	private ModelService modelService;
	@Autowired
	private ModelFieldService modelFieldService;
	@Autowired
	private ArticleTypeService articleTypeService;
	@Autowired
	private UserBindService userBindService;
	@Autowired
	private ChannelService channelService;
	@Autowired
	private ArticleService service;
	@Autowired
	private PwdEncoder pwdEncoder;
	@Autowired
	private FileRepository fileRepository;

}