package com.portal.usermgr.action.fnt;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.javapms.basic.security.encoder.PwdEncoder;
import com.javapms.basic.utils.DateUtils;
import com.javapms.basic.utils.ResponseUtils;
import com.javapms.basic.utils.ServicesUtils;
import com.portal.sysmgr.entity.Site;
import com.portal.sysmgr.utils.Constants;
import com.portal.sysmgr.utils.ContextTools;
import com.portal.sysmgr.utils.ViewTools;
import com.portal.usermgr.entity.User;
import com.portal.usermgr.service.AdminService;
import com.portal.usermgr.service.MemberService;
import com.portal.usermgr.service.UserService;

@Controller
public class LoginAct {

	@RequestMapping(value = "/login.jsp", method = RequestMethod.GET)
	public String input(HttpServletRequest request, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		if (user != null) {
			return "redirect:/";
		}
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, Constants.LOGIN_INPUT);
	}

	@RequestMapping(value = "/login.jsp", method = RequestMethod.POST)
	public String submit(String username, String password, String nextUrl,
			HttpServletRequest request, ModelMap model) {
		Site site = ContextTools.getSite(request);
		Subject currentUser = SecurityUtils.getSubject();
		UsernamePasswordToken token = new UsernamePasswordToken(username,
				pwdEncoder.encodePassword(password));
		token.setRememberMe(true);
		try {
			currentUser.login(token);
		} catch (UnknownAccountException uae) {
		} catch (IncorrectCredentialsException ice) {
		} catch (LockedAccountException lae) {
		}
		User user = userService.findByUsername(username);
		String msg = checkLogin(site, user);
		if (!StringUtils.isBlank(msg)) {
			model.addAttribute("msg", msg);
			ViewTools.frontData(request, model, site);
			return ViewTools.getTplPath(request, site.getSolutionPath(),
					Constants.TPLDIR_USER, Constants.LOGIN_INPUT);
		}
		if (currentUser.isAuthenticated()) {
			if (!user.getStatus().equals(User.NORMAL)) {
				return ViewTools.showMessage(nextUrl, request, model,
						"该账号已经被禁止登录!", 0);
			}
			String ip = ServicesUtils.getIpAddr(request);
			if (user.getAdmin() == null) {
				memberService.updateLoginInfo(user, ip);
			} else {
				adminService.updateLoginInfo(user, ip);
			}
			if (!StringUtils.isBlank(nextUrl)) {
				return "redirect:" + ViewTools.showNextUrl(nextUrl, site);
			}
			return "redirect:/";
		} else {
			if (site.getNeedCheck()) {
				if (user != null) {
					user = userService.updateFailTime(user);
					int i = site.getLoginCount() - user.getFailCount();
					model.addAttribute("msg", "用户名或密码错误,登录失败,您还有" + i + "次机会!");
					ViewTools.frontData(request, model, site);
					return ViewTools.getTplPath(request,
							site.getSolutionPath(), Constants.TPLDIR_USER,
							Constants.LOGIN_INPUT);
				}
			}
			model.addAttribute("msg", "用户名或者密码错误");
			if (!StringUtils.isBlank(nextUrl)) {
				model.addAttribute("url", nextUrl);
			}
			ViewTools.frontData(request, model, site);
			return ViewTools.getTplPath(request, site.getSolutionPath(),
					Constants.TPLDIR_USER, Constants.LOGIN_INPUT);
		}
	}

	@RequestMapping(value = "/ajaxlogin.jsp", method = RequestMethod.POST)
	public void login(String username, String password,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) throws JSONException {
		JSONObject json = new JSONObject();
		Site site = ContextTools.getSite(request);
		Subject currentUser = SecurityUtils.getSubject();
		UsernamePasswordToken token = new UsernamePasswordToken(username,
				pwdEncoder.encodePassword(password));
		token.setRememberMe(true);
		try {
			currentUser.login(token);
		} catch (UnknownAccountException uae) {
		} catch (IncorrectCredentialsException ice) {
		} catch (LockedAccountException lae) {
		}
		User user = userService.findByUsername(username);
		if (currentUser.isAuthenticated()) {
			if (!user.getStatus().equals(User.NORMAL)) {
				json.put("success", false);
				json.put("status", -1);
				ResponseUtils.renderJson(response, json.toString());
				return;
			}
			String ip = ServicesUtils.getIpAddr(request);
			if (user.getAdmin() == null) {
				memberService.updateLoginInfo(user, ip);
			} else {
				adminService.updateLoginInfo(user, ip);
			}
			if (user.getMember() != null) {
				json.put("avatar", user.getMember().getAvatar());
				if (user.getMember().getGroup(site.getId()) != null) {
					json.put("groupname",
							user.getMember().getGroup(site.getId()).getName());
				}
			}
			json.put("username", user.getUsername());
			json.put("success", true);
			json.put("status", 1);
			ResponseUtils.renderJson(response, json.toString());
			return;
		} else {
			json.put("success", false);
			json.put("status", 0);
			ResponseUtils.renderJson(response, json.toString());
			return;
		}
	}

	@RequestMapping(value = "/logout.jsp")
	public String logout(String nextUrl, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		Subject currentUser = SecurityUtils.getSubject();
		currentUser.logout();
		if (!StringUtils.isBlank(nextUrl)) {
			return "redirect:" + ViewTools.showNextUrl(nextUrl, site);
		}
		ViewTools.frontData(request, model, site);
		return ViewTools.getTplPath(request, site.getSolutionPath(),
				Constants.TPLDIR_USER, Constants.LOGIN_INPUT);
	}

	@RequestMapping(value = "/jslogin.jsp")
	public String jslogin(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Site site = ContextTools.getSite(request);
		ViewTools.frontData(request, model, site);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return ViewTools.getTplPath(null, site.getSolutionPath(),
				Constants.TPLDIR_USER, "jslogin");
	}

	private String checkLogin(Site site, User user) {
		if (user != null) {
			if (site.getNeedCheck()) {
				if (site.getLoginCount() <= user.getFailCount()) {
					if (user.getLastFailTime() != null) {
						if (user.getLastFailTime().after(DateUtils.getToday())) {
							return "您登录失败次数超过" + site.getLoginCount()
									+ "次，今日禁止登录!";
						}
					}
				}
			}
		}
		return null;
	}

	@Autowired
	private UserService userService;
	@Autowired
	private MemberService memberService;
	@Autowired
	private AdminService adminService;
	@Autowired
	private PwdEncoder pwdEncoder;
}
