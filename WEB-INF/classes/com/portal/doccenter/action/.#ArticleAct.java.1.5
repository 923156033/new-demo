package com.portal.doccenter.action;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.wltea.analyzer.IKSegmentation;
import org.wltea.analyzer.Lexeme;

import com.javapms.basic.plugin.springmvc.RealPathResolver;
import com.javapms.basic.utils.ResponseUtils;
import com.javapms.basic.utils.ServicesUtils;
import com.portal.datacenter.operatedata.service.LogService;
import com.portal.doccenter.entity.Article;
import com.portal.doccenter.entity.ArticleExt;
import com.portal.doccenter.entity.ArticleTxt;
import com.portal.doccenter.entity.ArticleType;
import com.portal.doccenter.entity.Channel;
import com.portal.doccenter.entity.Model;
import com.portal.doccenter.entity.ModelField;
import com.portal.doccenter.service.ArticleService;
import com.portal.doccenter.service.ArticleTypeService;
import com.portal.doccenter.service.ChannelService;
import com.portal.doccenter.service.ModelFieldService;
import com.portal.doccenter.service.ModelService;
import com.portal.sysmgr.entity.Site;
import com.portal.sysmgr.utils.Constants;
import com.portal.sysmgr.utils.ContextTools;
import com.portal.usermgr.entity.Group;
import com.portal.usermgr.entity.User;
import com.portal.usermgr.service.GroupService;

@Controller
public class ArticleAct {
	private static final Logger log = LoggerFactory.getLogger(ArticleAct.class);

	@RequestMapping(value = "/doc/v_tree.do", method = RequestMethod.POST)
	public String tree(Integer parentId, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		model.addAttribute("parentId", parentId);
		Integer siteId = ContextTools.getSiteId(request);
		Integer userId = ContextTools.getUserId(request);
		List<Channel> list = channelService.getChannelByAdmin(userId, siteId,
				parentId, null, null, null, false);
		model.addAttribute("list", list);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "docCenter/document/tree";
	}

	@RequestMapping(value = "/doc/v_addtree.do", method = RequestMethod.POST)
	public String addtree(Integer cid, Integer parentId, Integer modelId,
			Integer chnlId, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		model.addAttribute("parentId", parentId);
		List<Channel> list = new ArrayList<Channel>();
		Integer siteId = ContextTools.getSiteId(request);
		User user = ContextTools.getUser(request);
		if (cid != null && parentId == null) {
			parentId = cid;
			list.add(channelService.findById(cid));
		} else {
			list = channelService.getChannelByModel(parentId, modelId, user,
					siteId);
		}
		if (chnlId != null) {
			list.remove(channelService.findById(chnlId));
		}
		model.addAttribute("list", list);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "docCenter/document/addtree";
	}

	@RequiresPermissions("admin:doc:list")
	@RequestMapping(value = "/doc/v_list.do", method = RequestMethod.GET)
	public String list(Integer chnlId, HttpServletRequest request,
			ModelMap model) {
		if (chnlId != null) {
			Channel chnl = channelService.findById(chnlId);
			model.addAttribute("modelList", chnl.getModelList());
		} else {
			model.addAttribute("modelList",
					modelService.getList(false, null, null));
		}
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		model.addAttribute("allModel", modelService.getList(false, null, null));
		model.addAttribute("chnlId", chnlId);
		model.addAttribute("typeList", typeList);
		return "docCenter/document/list";
	}

	@RequiresPermissions("admin:doc:list1")
	@RequestMapping(value = "/doc/v_list1.do", method = RequestMethod.GET)
	public String list1(String title, Byte[] status, Integer[] typeIds,
			Integer[] modelIds, boolean top, boolean recommend,
			Integer orderBy, Integer chnlId, Integer page, Integer pagesize,
			String sortname, String sortorder, HttpServletRequest request,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		Integer siteId = site.getId();
		User user = ContextTools.getUser(request);
		if (chnlId != null) {
			Channel chnl = channelService.findById(chnlId);
			model.addAttribute("modelList", chnl.getModelList());
		} else {
			model.addAttribute("modelList",
					modelService.getList(false, null, null));
		}
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		Page<Article> p = service.getPageArticle(StringUtils.trim(title),
				typeIds, modelIds, null, top, recommend, status, siteId, user,
				chnlId, 0, sortname, sortorder, 1, 30);
		model.addAttribute("p", p);
		model.addAttribute("siteId", siteId);
		model.addAttribute("allModel", modelService.getList(false, null, null));
		model.addAttribute("chnlId", chnlId);
		model.addAttribute("typeList", typeList);
		return "docCenter/document/list1";
	}

	@RequiresPermissions("admin:doc:add")
	@RequestMapping(value = "/doc/v_add.do", method = RequestMethod.GET)
	public String add(Integer cid, Integer modelId, HttpServletRequest request,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		Channel c = null;
		if (cid != null) {
			c = channelService.findById(cid);
		}
		Model m = modelService.findById(modelId);
		List<ModelField> fieldList = modelFieldService.getList(m.getId(),
				false, null, null);
		List<Group> groupList = groupService.getList(site.getId(), null, null);
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		model.addAttribute("model", m);
		model.addAttribute("fieldList", fieldList);
		model.addAttribute("groupList", groupList);
		model.addAttribute("typeList", typeList);
		if (cid != null) {
			model.addAttribute("cid", cid);
		}
		if (c != null) {
			model.addAttribute("channel", c);
		}
		return "docCenter/document/add";
	}

	@RequiresPermissions("admin:doc:edit")
	@RequestMapping(value = "/doc/v_edit.do", method = RequestMethod.GET)
	public String edit(Integer id, HttpServletRequest request, ModelMap model) {
		Site site = ContextTools.getSite(request);
		Article article = service.findById(id);
		List<ModelField> fieldList = modelFieldService.getList(article
				.getModel().getId(), false, null, null);
		List<Group> groupList = groupService.getList(site.getId(), null, null);
		Integer[] groupIds = Group.fetchIds(article.getViewGroups());
		List<ArticleType> typeList = articleTypeService.getList(false, null,
				null);
		model.addAttribute("article", article);
		model.addAttribute("channel", article.getChannel());
		model.addAttribute("fieldList", fieldList);
		model.addAttribute("groupList", groupList);
		model.addAttribute("groupIds", groupIds);
		model.addAttribute("typeList", typeList);
		return "docCenter/document/edit";
	}

	@RequiresPermissions("admin:doc:save")
	@RequestMapping(value = "/doc/o_save.do", method = RequestMethod.POST)
	public String save(Article bean, ArticleExt ext, ArticleTxt txt,
			Integer modelId, Integer[] viewGroupIds, String[] attPaths,
			String[] attNames, String[] imgPaths, String[] imgDescs,
			Boolean[] thumbs, String[] imgStyles, Integer channelId,
			HttpServletRequest request, ModelMap model) {
		Site site = ContextTools.getSite(request);
		User user = ContextTools.getUser(request);
		bean.setAttr(ServicesUtils.getRequestMap(request, "attr_"));
		// bean.setAttr(ServicesUtils.getRequestMap(request, "txt_"));
		bean = service.save(bean, ext, txt, site, user, viewGroupIds, attPaths,
				attNames, imgPaths, imgDescs, thumbs, imgStyles, channelId,
				modelId, false);
		log.info("save Article id={}", bean.getId());
		logService.operating(request, "添加文档", "id=" + bean.getId() + ";title="
				+ bean.getTitle());
		model.addAttribute(Constants.MSG, "文档添加成功");
		return add(channelId, modelId, request, model);
	}

	@RequiresPermissions("admin:doc:update")
	@RequestMapping(value = "/doc/o_update.do", method = RequestMethod.POST)
	public String update(Article bean, ArticleExt ext, ArticleTxt txt,
			Integer[] channelIds, Integer[] topicIds, Integer[] viewGroupIds,
			String[] attPaths, String[] attNames, String[] imgPaths,
			String[] imgDescs, Boolean[] thumbs, String[] imgStyles,
			Integer channelId, Byte statusstyle, HttpServletRequest request,
			ModelMap model) {
		User user = ContextTools.getUser(request);
		Map<String, String> attr = ServicesUtils
				.getRequestMap(request, "attr_");
		bean = service.update(bean, ext, txt, channelIds, viewGroupIds,
				attPaths, attNames, imgPaths, imgDescs, thumbs, imgStyles,
				attr, channelId, user, statusstyle, false);
		log.info("update Article id={}.", bean.getId());
		logService.operating(request, "修改文档", "id=" + bean.getId() + ";title="
				+ bean.getTitle());
		model.addAttribute(Constants.MSG, "文档修改成功");
		return edit(bean.getId(), request, model);
	}

	@RequiresPermissions("admin:doc:move")
	@RequestMapping(value = "/doc/o_move.do", method = RequestMethod.POST)
	public void move(Integer chnlId, String[] modelIds,
			HttpServletRequest request, HttpServletResponse response)
			throws JSONException {
		JSONObject json = new JSONObject();
		Map<String, String> channels = ServicesUtils.getRequestMapWithPrefix(
				request, "chnl_", modelIds);
		long count = service.moveDoc(chnlId, channels);
		json.put("success", true);
		json.put("count", count);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequiresPermissions("admin:doc:empty")
	@RequestMapping(value = "/doc/o_empty.do", method = RequestMethod.POST)
	public void empty(Integer chnlId, HttpServletRequest request,
			HttpServletResponse response) throws JSONException {
		JSONObject json = new JSONObject();
		int count = service.emptyDoc(chnlId);
		json.put("success", true);
		json.put("count", count);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequestMapping(value = "/doc/jsonData.do", method = RequestMethod.POST)
	public String dataPageByJosn(String title, Byte[] status,
			Integer[] typeIds, Integer[] modelIds, boolean top,
			boolean recommend, Integer orderBy, Integer chnlId, Integer page,
			Integer pagesize, String sortname, String sortorder,
			HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		Site site = ContextTools.getSite(request);
		Integer siteId = site.getId();
		User user = ContextTools.getUser(request);
		Page<Article> p = service.getPageArticle(StringUtils.trim(title),
				typeIds, modelIds, null, top, recommend, status, siteId, user,
				chnlId, 0, sortname, sortorder, page, pagesize);
		List<ArticleType> typeList = articleTypeService.getList(true, null,
				null);
		model.addAttribute("p", p);
		model.addAttribute("siteId", siteId);
		model.addAttribute("typeList", typeList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "docCenter/document/listdata";
	}

	@RequiresPermissions("admin:doc:delete")
	@RequestMapping(value = "/doc/o_ajax_delete.do", method = RequestMethod.POST)
	public void deleteArticle(Integer[] ids, HttpServletRequest request,
			HttpServletResponse response) throws JSONException {
		JSONObject json = new JSONObject();
		Article[] beans = service.deleteByIds(ids);
		for (Article bean : beans) {
			log.info("删除文档: id={}", bean.getId());
			logService.operating(request, "删除文档", "id=" + bean.getId()
					+ ";title=" + bean.getTitle());
		}
		json.put("success", true);
		json.put("status", 1);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequiresPermissions("admin:doc:cycle")
	@RequestMapping(value = "/doc/o_ajax_cycle.do", method = RequestMethod.POST)
	public void cycleArticle(Integer[] ids, HttpServletRequest request,
			HttpServletResponse response) throws JSONException {
		JSONObject json = new JSONObject();
		Article[] beans = service.cycle(ids);
		for (Article bean : beans) {
			log.info("文档放入回收站,id={}", bean.getId());
		}
		json.put("success", true);
		json.put("status", 1);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequiresPermissions("admin:doc:reduct")
	@RequestMapping(value = "/doc/o_ajax_reduct.do", method = RequestMethod.POST)
	public void reductArticle(Integer[] ids, HttpServletRequest request,
			HttpServletResponse response) throws JSONException {
		JSONObject json = new JSONObject();
		Article[] beans = service.reduct(ids);
		for (Article bean : beans) {
			log.info("文档还原,id={}", bean.getId());
		}
		json.put("success", true);
		json.put("status", 1);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequiresPermissions("admin:doc:check")
	@RequestMapping(value = "/doc/o_check.do", method = RequestMethod.POST)
	public void check(Integer[] ids, String chnlNumber,
			HttpServletRequest request, HttpServletResponse response)
			throws JSONException {
		JSONObject json = new JSONObject();
		User user = ContextTools.getUser(request);
		Article[] beans = service.check(ids, user);
		for (Article bean : beans) {
			log.info("check Doc id={}", bean.getId());
		}
		json.put("success", true);
		json.put("status", 1);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequiresPermissions("admin:doc:check")
	@RequestMapping(value = "/doc/o_celcheck.do", method = RequestMethod.POST)
	public void celcheck(Integer[] ids, String chnlNumber,
			HttpServletRequest request, HttpServletResponse response)
			throws JSONException {
		JSONObject json = new JSONObject();
		User user = ContextTools.getUser(request);
		Article[] beans = service.cancelCheck(ids, user);
		for (Article bean : beans) {
			log.info("check Doc id={}", bean.getId());
		}
		json.put("success", true);
		json.put("status", 1);
		ResponseUtils.renderJson(response, json.toString());
		return;
	}

	@RequestMapping("/doc/o_delete_file.do")
	public void deleteFile(String path, HttpServletRequest request,
			HttpServletResponse response) {
		if (path.indexOf(Constants.UPLOAD_PATH) > -1) {
			path = path.substring(path.indexOf(Constants.UPLOAD_PATH));
		}
		String realpath = realPathResolver.get(path);
		File f = new File(realpath);
		if (f.exists()) {
			f.delete();
		}
		ResponseUtils.renderText(response, "");
	}

	@RequestMapping("/doc/v_titletags.do")
	public void titleTags(String title, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) throws JSONException {
		StringBuffer strb = new StringBuffer("");
		JSONObject json = new JSONObject();
		if (!StringUtils.isBlank(title)) {
			IKSegmentation ikSeg = new IKSegmentation(new StringReader(title),
					true);
			try {
				Lexeme l = null;
				while ((l = ikSeg.next()) != null) {
					if (l.getLexemeType() == 0) {
						strb.append(l.getLexemeText());
						strb.append(",");
					}
				}
				json.put("success", true);
				if (strb.toString().length() > 1) {
					json.put(
							"tag",
							strb.toString().substring(0,
									strb.toString().length() - 1));
				}
				ResponseUtils.renderJson(response, json.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Autowired
	private ChannelService channelService;
	@Autowired
	private ModelService modelService;
	@Autowired
	private ModelFieldService modelFieldService;
	@Autowired
	private GroupService groupService;
	@Autowired
	private ArticleTypeService articleTypeService;
	@Autowired
	private RealPathResolver realPathResolver;
	@Autowired
	private LogService logService;
	@Autowired
	private ArticleService service;

}